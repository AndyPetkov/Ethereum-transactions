// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	repository "mid-the-ethereum-fetcher-zxowaz/repository"

	mock "github.com/stretchr/testify/mock"
)

// TransactionService is an autogenerated mock type for the TransactionService type
type TransactionService struct {
	mock.Mock
}

// ConfigureRepoTransaction provides a mock function with given fields: _a0
func (_m *TransactionService) ConfigureRepoTransaction(_a0 repository.TransactionRepo) {
	_m.Called(_a0)
}

// GetAll provides a mock function with given fields:
func (_m *TransactionService) GetAll() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByRlphex provides a mock function with given fields: rlphex
func (_m *TransactionService) GetByRlphex(rlphex string) (interface{}, error) {
	ret := _m.Called(rlphex)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(rlphex)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(rlphex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rlphex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionService creates a new instance of TransactionService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionService {
	mock := &TransactionService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
